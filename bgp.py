# -*- coding: utf-8 -*-
"""BGP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jjjQV3kEkr0ijznpXCNaEBU0Do7gkvvd
"""

!apt-get install bgpdump

import os
os.chdir('/content')

# Verify the file is present in the directory
!ls

# Parse the MRT file
!bgpdump rib.20241220.0600.bz2 > rib_parsed.txt
!ls /content
!head rib.20241220.0600

!head rib_parsed.txt

import pandas as pd

# Read the parsed BGP dump into a DataFrame
with open('rib_parsed.txt', 'r') as file:
    lines = file.readlines()

# Preview a few lines to understand structure
for line in lines[:5]:
    print(line)

import pandas as pd

# Load the parsed BGP data file into a list
with open('rib_parsed.txt', 'r') as file:
    lines = file.readlines()

# Initialize lists to store parsed data
timestamps = []
prefixes = []
as_paths = []
announcements_withdrawals = []

# Parse each line and extract relevant fields
for line in lines:
    fields = line.split('|')
    if len(fields) > 6:
        timestamps.append(fields[1])  # Timestamp field
        prefixes.append(fields[5])   # Prefix field
        as_paths.append(fields[6])   # AS Path field
        # Mark announcements/withdrawals
        if "withdrawal" in line.lower():
            announcements_withdrawals.append('withdrawal')
        else:
            announcements_withdrawals.append('announcement')

# Create a DataFrame
df = pd.DataFrame({
    'Timestamp': pd.to_datetime(timestamps, unit='s'),  # Convert to datetime
    'Prefix': prefixes,
    'AS_PATH': as_paths,
    'Type': announcements_withdrawals
})

# Preview the DataFrame
print(df.head())

df = df.drop_duplicates()

unique_prefixes = df['Prefix'].nunique()
print(f"Unique Prefixes: {unique_prefixes}")

print(df['AS_PATH'].value_counts().head(10))

import matplotlib.pyplot as plt

# Top 10 prefixes by frequency
df['Prefix'].value_counts().head(10).plot(kind='bar')
plt.title('Top 10 Prefixes')
plt.show()

# Count the number of occurrences (announcements + withdrawals) for each prefix
prefix_change_counts = df['Prefix'].value_counts()

# Get the top 5 prefixes with the most changes
top_5_prefixes = prefix_change_counts.head(5)

print("Top 5 Prefixes with the Most Changes:")
print(top_5_prefixes)

import matplotlib.pyplot as plt

# Top 5 prefixes with the most changes
top_5_prefixes.plot(kind='bar', color='blue')
plt.title('Top 5 Prefixes with the Most Changes')
plt.xlabel('Prefix')
plt.ylabel('Change Count')
plt.show()

# Check the distribution of the 'Type' column to see if there are any 'withdrawal' entries
print(df['Type'].value_counts())

# Print first 20 lines from the parsed BGP data file to inspect the format
with open('rib_parsed.txt', 'r') as file:
    for i, line in enumerate(file):
        if i < 20:  # Inspect the first 20 lines
            print(line.strip())

# Assuming the 'Type' column indicates B for announcement and W for withdrawal
withdrawals = df[df['Type'] == 'W']
print(withdrawals)

# Open the parsed BGP file and count the number of lines (entries)
file_path = 'rib_parsed.txt'

with open(file_path, 'r') as file:
    lines = file.readlines()
    print(f"Number of data entries in the BGP file: {len(lines)}")

import json

# Function to parse the BGP dump line and extract relevant fields
def parse_bgp_line(line):
    fields = line.strip().split('|')

    # Extract relevant fields (Prefix, AS-PATH, Type, etc.)
    data = {
        "timestamp": fields[1],
        "type": fields[2],
        "ip_address": fields[3],
        "prefix": fields[5],
        "as_path": fields[6].split(' '),  # AS-PATH is a space-separated string
        "additional_info": fields[9:]  # Add any additional info that you may need
    }

    return data

# Path to the rib_parsed.txt file
input_file_path = 'rib_parsed.txt'
output_file_path = 'bgp_data.json'

# Initialize an empty list to store the parsed data
bgp_data = []

# Open the rib_parsed.txt file and read it line by line
with open(input_file_path, 'r') as file:
    for line in file:
        # Parse each line and append to the list
        bgp_data.append(parse_bgp_line(line))

# Save the parsed data to a JSON file
with open(output_file_path, 'w') as json_file:
    json.dump(bgp_data, json_file, indent=4)

print(f"BGP data has been successfully saved to {output_file_path}")